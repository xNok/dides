// Code generated by MockGen. DO NOT EDIT.
// Source: trigger.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	deployment "github.com/xnok/dides/internal/deployment"
	inventory "github.com/xnok/dides/internal/inventory"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockStore) GetByID(id string) (*deployment.DeploymentRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*deployment.DeploymentRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockStoreMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockStore)(nil).GetByID), id)
}

// GetByStatus mocks base method.
func (m *MockStore) GetByStatus(status deployment.DeploymentStatus) ([]*deployment.DeploymentRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByStatus", status)
	ret0, _ := ret[0].([]*deployment.DeploymentRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByStatus indicates an expected call of GetByStatus.
func (mr *MockStoreMockRecorder) GetByStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByStatus", reflect.TypeOf((*MockStore)(nil).GetByStatus), status)
}

// Save mocks base method.
func (m *MockStore) Save(req *deployment.DeploymentRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStoreMockRecorder) Save(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStore)(nil).Save), req)
}

// Update mocks base method.
func (m *MockStore) Update(record *deployment.DeploymentRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockStoreMockRecorder) Update(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStore)(nil).Update), record)
}

// MockInventoryService is a mock of InventoryService interface.
type MockInventoryService struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceMockRecorder
}

// MockInventoryServiceMockRecorder is the mock recorder for MockInventoryService.
type MockInventoryServiceMockRecorder struct {
	mock *MockInventoryService
}

// NewMockInventoryService creates a new mock instance.
func NewMockInventoryService(ctrl *gomock.Controller) *MockInventoryService {
	mock := &MockInventoryService{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryService) EXPECT() *MockInventoryServiceMockRecorder {
	return m.recorder
}

// GetInstancesByLabels mocks base method.
func (m *MockInventoryService) GetInstancesByLabels(labels map[string]string) ([]*inventory.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesByLabels", labels)
	ret0, _ := ret[0].([]*inventory.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesByLabels indicates an expected call of GetInstancesByLabels.
func (mr *MockInventoryServiceMockRecorder) GetInstancesByLabels(labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesByLabels", reflect.TypeOf((*MockInventoryService)(nil).GetInstancesByLabels), labels)
}

// GetInstancesWithState mocks base method.
func (m *MockInventoryService) GetInstancesWithState(currentState, desiredState inventory.State) ([]*inventory.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesWithState", currentState, desiredState)
	ret0, _ := ret[0].([]*inventory.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesWithState indicates an expected call of GetInstancesWithState.
func (mr *MockInventoryServiceMockRecorder) GetInstancesWithState(currentState, desiredState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesWithState", reflect.TypeOf((*MockInventoryService)(nil).GetInstancesWithState), currentState, desiredState)
}

// UpdateDesiredState mocks base method.
func (m *MockInventoryService) UpdateDesiredState(instanceKey string, state inventory.State) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDesiredState", instanceKey, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDesiredState indicates an expected call of UpdateDesiredState.
func (mr *MockInventoryServiceMockRecorder) UpdateDesiredState(instanceKey, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDesiredState", reflect.TypeOf((*MockInventoryService)(nil).UpdateDesiredState), instanceKey, state)
}

// MockLocker is a mock of Locker interface.
type MockLocker struct {
	ctrl     *gomock.Controller
	recorder *MockLockerMockRecorder
}

// MockLockerMockRecorder is the mock recorder for MockLocker.
type MockLockerMockRecorder struct {
	mock *MockLocker
}

// NewMockLocker creates a new mock instance.
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
	mock := &MockLocker{ctrl: ctrl}
	mock.recorder = &MockLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockLocker) Lock(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockLockerMockRecorder) Lock(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLocker)(nil).Lock), ctx, key)
}

// Unlock mocks base method.
func (m *MockLocker) Unlock(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLockerMockRecorder) Unlock(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLocker)(nil).Unlock), ctx, key)
}
